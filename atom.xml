<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Srihari's Blog]]></title>
  <link href="http://sriharisriraman.in/atom.xml" rel="self"/>
  <link href="http://sriharisriraman.in/"/>
  <updated>2013-09-15T23:35:21+05:30</updated>
  <id>http://sriharisriraman.in/</id>
  <author>
    <name><![CDATA[Srihari Sriraman]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[gimp tito]]></title>
    <link href="http://sriharisriraman.in/blog/2013/09/15/gimp-tito/"/>
    <updated>2013-09-15T20:27:00+05:30</updated>
    <id>http://sriharisriraman.in/blog/2013/09/15/gimp-tito</id>
    
    <content type="html"><![CDATA[<p>&lsquo;Tito&rsquo; is like Quicksilver inside GIMP. You bring up tito and enter something, it gives a dropdown of possible actions. You hit enter to execute that action. <a href="https://plus.google.com/116053365635940402074">Michael Natterer</a> (maintainer) told me on IRC about a year ago that it can go upstream with a few changes. Quite sadly, I haven&rsquo;t had the time to make those changes.</p>

<p>It works pretty well though. Here are a few screenshots:</p>

<p><img src="http://sriharisriraman.in/images/tito-images/snap.jpg" alt="snap" />
<img src="http://sriharisriraman.in/images/tito-images/apcan.jpg" alt="apply canvas" />
<img src="http://sriharisriraman.in/images/tito-images/blur.jpg" alt="blur" />
More screenshots <a href="https://github.com/ssrihari/gimp-tito/wiki/About-gimp-tito#v-screenshots">here</a>.</p>

<h3>Currently implemented features</h3>

<ul>
<li> It searches first through labels and then tooltips of actions</li>
<li> It supports fuzzy search</li>
<li> It is adaptive: frequently used actions appear higher in the results list</li>
<li> It shows the tooltip, icon and shortcut in each search result if present</li>
<li> It is highly configurable via a preferences window</li>
</ul>


<p>More high level details in the <a href="https://github.com/ssrihari/gimp-tito/wiki/About-gimp-tito">tito-readme</a>.
There is also an old <a href="http://www.youtube.com/watch?v=G0PuH1LFWhA">screencast</a> I made. It isn&rsquo;t great, but you can see it in action ;)</p>

<h3>The story behind it</h3>

<p>We were four developers who knew little about gtk and git. We started off well and shared our initial prototype. We got a mix of positive and dismissive responses from the gimp dev list. You can see the <a href="http://www.gimpusers.com/forums/gimp-developer/14142-an-update-on-the-menu-search">thread</a> where the devs and I debated the values it provided.</p>

<p>Quite a few devs tried it out and gave me feedback. I incorporated that feedback and fixed bugs and regularly interacted with the team on how it could be better. But tito got a fair amount of push back from the interaction design perspective.</p>

<h3>We can finish this together</h3>

<p>I really need some company in finishing this up. Mitch (Michael Natterer on IRC) took a look at the diff and suggested a few changes that would make it eligible to go upstream. I&rsquo;ve created <a href="https://github.com/ssrihari/gimp-tito/issues">issues</a> for these on github. My gut feeling is that this should take lesser than a week. Please (get in touch)[<a href="https://twitter.com/sriharisriraman">https://twitter.com/sriharisriraman</a>] if you are interested. Let&rsquo;s collaborate!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[You probably shouldn't be nesting your CSS]]></title>
    <link href="http://sriharisriraman.in/blog/2013/09/08/dont-nest-css/"/>
    <updated>2013-09-08T12:16:00+05:30</updated>
    <id>http://sriharisriraman.in/blog/2013/09/08/dont-nest-css</id>
    
    <category term='css' />
    
    <category term='nilenso' />
    
    <category term='smacss' />
    
    <content type="html"><![CDATA[<p><strong>TL;DR:</strong>  Don&rsquo;t nest CSS. Nest class names instead. This is one of the most useful take-aways from <a href="http://smacss.com">SMACSS</a>.
Follow this, and it will change the way you write scss for the better.</p>

<p>With the coming of <a href="http://sass-lang.com/">sass</a>,  we have all seen how writing css has gotten easier.
We love writing css that is similar to our html. The following would seem natural to us:</p>

<figure class='code'><figcaption><span>HTML for a component</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;my-component&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;header&gt;&lt;/header&gt;</span>
</span><span class='line'>  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;some-section&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;header&gt;&lt;/header&gt;</span>
</span><span class='line'>    <span class="nt">&lt;p</span> <span class="na">class=</span><span class="s">&quot;description&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">&quot;important&quot;</span><span class="nt">&gt;&lt;/span&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/p&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Styling the component (the wrong way)</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='sass'><span class='line'><span class="nt">div</span><span class="nc">.my-component</span> <span class="err">{</span>
</span><span class='line'>  <span class="nt">header</span> <span class="err">{}</span>
</span><span class='line'>  <span class="nc">.some-section</span> <span class="err">{</span>
</span><span class='line'>    <span class="nt">header</span> <span class="err">{}</span>
</span><span class='line'>    <span class="nt">p</span> <span class="err">{</span>
</span><span class='line'>      <span class="nc">.important</span> <span class="err">{}</span>
</span><span class='line'>    <span class="err">}</span>
</span><span class='line'>  <span class="err">}</span>
</span><span class='line'><span class="err">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This gives us the comfort of nesting css the same way we nest html. It gives us context that
<code>some-section</code> rests inside <code>my-component</code>, but nothing more. And, this gets convoluted quickly. if I had to override the style for this component elsewhere, I&rsquo;d have to do something like:</p>

<figure class='code'><figcaption><span>Overriding the style for .important</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sass'><span class='line'><span class="nc">.my-component</span> <span class="nc">.some-section</span> <span class="nt">p</span> <span class="nc">.important</span> <span class="err">{}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>The correct way:</h2>

<p>Add the context, name of component/module in the class attribute:</p>

<figure class='code'><figcaption><span>HTML for a component</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;my-component&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;header</span> <span class="na">class=</span><span class="s">&quot;my-component-header&quot;</span><span class="nt">&gt;&lt;/header&gt;</span>
</span><span class='line'>  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;my-component-section&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;header</span> <span class="na">class=</span><span class="s">&quot;my-component-section-header&quot;</span><span class="nt">&gt;&lt;/header&gt;</span>
</span><span class='line'>    <span class="nt">&lt;p</span> <span class="na">class=</span><span class="s">&quot;my-component-section-description&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">&quot;my-component-section-important&quot;</span><span class="nt">&gt;&lt;/span&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/p&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Styling the component (the correct way)</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='sass'><span class='line'><span class="nc">.my-component</span> <span class="err">{}</span>
</span><span class='line'><span class="nc">.my-component-header</span> <span class="err">{}</span>
</span><span class='line'><span class="nc">.my-component-section</span> <span class="err">{}</span>
</span><span class='line'><span class="nc">.my-component-section-header</span> <span class="err">{}</span>
</span><span class='line'><span class="nc">.my-component-section-description</span> <span class="err">{}</span>
</span><span class='line'><span class="nc">.my-component-section-important</span> <span class="err">{}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>What does this give us?</h3>

<ul>
<li>All the context that we got in nesting css. Except that the nesting is in the name instead of nested braces that are hard to read.</li>
<li>CSS with minimum specificity so that it is easy to override. For the purpose of subclassing modules, it is preferable to nest the styling by exactly one level. See exceptions below.</li>
<li>Independence from structure, so we can move our components around without having to move css around. For this purpose, it is also good to stay away from element selectors.</li>
<li>Control over cascading, that you thought was only possible <a href="http://37signals.com/svn/posts/3003-css-taking-control-of-the-cascade">with nesting</a>. The nesting in class names gives a unique name to your selector that is quite hard to override accidentally with cascading.</li>
<li>The answer to &ldquo;Where is the CSS for this?&rdquo;. Since the selectors have almost a one to one mapping with the class attributes, you just have to file-search for them now.</li>
<li>Speed. See how this helped <a href="https://speakerdeck.com/jonrohan/githubs-css-performance?slide=11">github</a> speed up their diff pages.</li>
</ul>


<h3>Conclusion:</h3>

<p>Don&rsquo;t nest CSS. You could start off with the <a href="http://thesassway.com/beginner/the-inception-rule">inception rule</a>, but I strongly suggest you stick to zero nesting levels (see exceptions below).</p>

<h3>Exceptions:</h3>

<ul>
<li>When you are writing modules that you will <a href="http://smacss.com/book/type-module#subclassing">subclass</a>, it is necessary to nest (by one level) the styling under the module&rsquo;s selector so that you can keep the defaults and override only the differences.</li>
<li>When overriding <a href="http://smacss.com/book/type-base">base rules</a>, one usually has to provide enough specificity to override an element selector, say. In these cases, nesting (by one level) is ok.</li>
</ul>

]]></content>
  </entry>
  
</feed>
